#객체 지향의 4대 특성
    1. 캡슐활
        @캡슐화는 객체의 속성(Variable)을 보호하기 위해서 사용한다.

        컴퓨터 전원 켠다? 직접 메인보드에 전기 신호 x
        외부 케이스에 있는 전원 버튼 이용해서 상태 속성 on/off 하도록 변경한다.

        @Method 설계
            - 속성이 선언되었으나, 이의 상태를 변경하는 method가 없다면? 잘못 선언된 것!
                자기가 가지고 있는 속성에 대해서 해당 상태를 변경하는 기능을 제공해야 한다.
            - 실물 객체가 가진 기능을 모두(?) 제공 해야 한다.
            - 각각 메서드는 서로 관련 있어야 함.
                차량 렌탈/반납, 등록/해지 등 각 속성의 상대 되는 기능을 제공해야 한다.
                ->connect, disconnet
            - 객체 안의 Method는 객체 안의 속성을 처리해야 하며, 다른 객체를 전달받아 해당 다른 객체에 정의 된 속성을
                직접 처리하면 안 된다.

                Method 실행에 필요한 값들은 매개변수 형태로 전달 된다.

        ★
        - Getter/Setter Method
            외부에서 내부 속성(Variable)에 직접 접근 하는 것이 아닌 Getter/Setter Method를 통해서 접근하도록 적용
        - CRUD Method
            데이터 처리를 위한 기본적인 CRUD Method를 제공
        - Business Logic Method
            비즈니스 로직 처리를 위한 Method를 제공
        - 객체의 생명 주기 처리 Method
            흔히 destory(), disconnet() 등 quit()등 소멸에 대한 method
        - 객체의 영구성 관리 Method
            영구성(유효성) 속성에 대한 변경이 필요한 경우 외부에서 접근이 불가능하게 private 선언
            내부의 다른 method를 통해서 사용 되도록 함. getInstance();

        Method 속성은 반드시 1개에 속할 필요는 없으며 여러 속성에 해당 될 수 있다.

        @장점
            -> 추상화 가능 (동작 몰라도 됨)
            -> 재 사용성 향상 (모듈성과 응집도가 높아진다. 재사용성 높아진다) <-> 절차지향이라면 전역변수로 사용.... 꼬일 가능성 높음
            -> 유지보수 효율성 향상

            -> 무결성
                변수 private, Method를 public.
                public method는 입력된 매개변수 Validation(확인)을 한 후 실행함!
                Validation을 통하여, 객체의 값을 바꾸거나 값에 대한 유효성을 가질 수 있다.
                뭐 숫자 넣어야하는데 한글로 넣었다? method에서 체크해주고 숫자로 바꿔서 변수 값 바꿀 수 있겠지!


    2. 상속
        하위로 내려갈 수록 구체화 되는 것이다.
                    유닛                  --> name, Spped, depend, Move(), Attack()
            지상유닛        공중유닛        --> isFly =true/false
          저글링  탱크     레이스   드랍쉽
          -2마리  -시즈    -투명    -수송

        상속의 효과
            프로그램 구조 이해 가능 - 최상위 클래스의 구조 보고, 하위 클래스의 동작 이해 가능
            재사용성 - 상속쓰면 코딩 재사용성 줄어들어
            확장성 향상 - 일관성 가지고 간단하게 프로그램 확장 가능
            유지보수성 향상 - 각 객체마다 있다? 그러면 다 수정해줘야하는데. 상속하면 그냥 상위 클래스 코드만 바꾸면 됨.


    3. 다형성
        하나의 개체가 여러 가지 형태로 변화하는 것. 오버라이딩을 통해서 가능
            유닛 저글링 = new 저글링();
            지상유닛 탱크 = new 탱크();
            유닛 드랍쉽 = new 드랍쉽();
            공중유닛 레이스 = new 레이스();


    4. 추상화
        객체지향에서의 추상화는 모델링이다.
        구체적으로 공통적인 부분, 또는 특정 특성을 분리해서 재조합 하는 부분이 추상화이다.
        다형성, 상속 모두 추상화에 속한다.
        유닛클래스에 어떤 거(공통으로 해서) 꺼낼 것인가~! 정하는 거 추상화과정. 모델링이라고 볼 수 있다.
