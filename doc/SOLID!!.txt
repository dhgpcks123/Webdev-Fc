
#객체지향 설계의 5원칙 SOLID!

     응집도와 결합도
        좋은 소프트웨어 설계 결합도는 낮추고, 응집도는 높여야 한다.

        결합도
        모듈(클래스)간의 상호 의존 정도를 나타내는 지표.
        결합도가 낮아야 객체 재사용 및 유지보수 유리. 서로 의존하고 있어서...
        뭐 하나 수정하면 다른 클래스도 영향을 받아서, 바꿔야 한다? 결합도가 높은 상태이다.

        응집도
        하나의 모듈 내부에 존재하는 구성 요소들의 기능적 관련성으로
        응집도가 높은 모듈은 하나의 책임에 집중하고 독립성이 높아져, 재사용 및 유지보수가 용이.

    1.SRP(Single Responsibilty Principle) 단일 책임 원칙
        FTP Client 네트워크 기능, 파일 리딩, 파일 쓰기 기능을 가진 클래스를

        이걸 쓰기 위해서
        HttpClient, FileWriter, FTP, FileReader가 참조하고 있었다.

        FTP Client의 파일 리딩 기능을... 문자로 읽어오게 기능을 바꿨다?
        그러면 참조하고 있던 FileReader도 수정해줘야 한다.

        지금 FTP Client 기능 너무 많이 가지고 있잖아??? 분리해줘

        스타크래프트 절차지향적으로 설계해보자 ㅋㅋ

        class Unit {
            private String name;
            private int speed;

            public void attack(){
            }
            public void move(){
                if(name.equals("저글링")){
                        speed += 3;
                }else if(name.equals("탱크")){
                        if("탱크모드"){
                                speed = 0
                        }else
                                speed = 10
                        }
                }else if(name.equals("정찰기")){
                        speed=15
                        충돌 = false
                }
            }
        }
        유닛 100개? 찾기 어렵다 ㅋㅋ 코드 중복도 개 많고....(유지보수도 꾸졌고, 가독성도 떨어지고, 다 읽어야하니까 속도도 느릴 것 같고, 코딩도 많이 해야함)

    2. OCP (Open Closed Priciple) 개방 폐쇄 원칙
        자신의 확장에는 열려 있고, 주변의 변화에 대해서는 닫혀 있어야 한다.

        상위 클래스 또는 인터페이스를 중간에 둠으로써 자신의 변화에 대해서는 폐쇄적이지만, 인터페이스는 외부의 변화에 대해서 확장을 개방해 줄 수 있다.

            Application
                ㅣ
          JDBC Interface
        ㅣ       ㅣ     ㅣ
        오라클   MySQL   H2
        이걸로 설명이 충분하지 않은 것 같은데... JDBC Interface의 코드를 바꿔줘야 하잖아. 외부에서 Config파일을 통해서 다형성 활욯애서 넣어주는 게 OCP원칙 설명에 더 맞지 않나?


    3. LSP(Liskov Substitution Principle) 리스코프 치환 원칙
        서브 타입은 언제나 자신의 기반(상위) 타입으로 교체할 수 있어야 한다.

           LSP 위반
            아반떼
            ㅣ   ㅣ
         소나타    그랜저

            LSP 적용
            공중유닛
            ㅣ   ㅣ
         레이스    드랍쉽


    4. ISP (Interface Segregation Principle) 인터페이스 분리 원칙
        클라이언트는 자신이 사용하지 않는 메서드에 의존 관계를 맺으면 안 된다.
        프로젝트 요구 사항과 설계에 따라서 SRP/ISP를 선택한다.

        지도인터페이스
        도보안내
        자동차안내
        바이크안내
        자전거안내
        하늘 길안내
        해상 길안내
        지하철 노선
        ...

        자전거 길 안내 기능을 구현하기 위해서 지도인터페이스를 다 상속해서 쓰면?? 너무 비효율적.
        자전거 길 안내만 기능하는 인터페이스를 분리해서 사용하도록 한다.


    5. DIP(Dependency Inversion Principle) 의존 역전 원칙
        자신보다 변하기 쉬운 것에 의존하지 말아야 한다.

        추상화를 의존해야지 구체화를 의존하면 안 된다.
