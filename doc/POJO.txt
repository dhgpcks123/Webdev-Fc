#POJO JAVA

    POJO JAVA란?
    POJO(Plain Old Java Object) 순수한 자바 오브젝트를 뜻한다.

    호랑이 담배필 때 EJB씀. 단순한 자바 오브젝트 말고, EJB에 종속적으로 사용 됨.
    그로 인해 Module교체, 시스템 업그레이드 시 종속성으로 인한 불편함 발생

    시스템 업그레이드 할 때 종속성 때문에 수정해야할 거 많았고, 시간도 오래 걸리고....

    그래! POJO로 코딩하자! 그럼 POJO의 특징은 머냐.

    POJO 특징!
        1. 특정 규약에 종속되지 않는다.
            특정 Library, Module에서 정의된 클래스를 상속 받아서 구현하지 않아도 된다.
            POJO가 되기 위해서는 외부의 의존성을 두지 않고, 순수한 JAVA로 구성이 가능해야 한다.

            즉, 자기 맡은 역할에만 충실하면 된다. 무대 디자인을 한다거나, 배우를 스카웃 한다거나 등등 하지 않는다.

        2. 특정 환경에 종속되지 않는다.
            만일 특정 비즈니스 로직을 처리하는 부분에 외부 종속적인 http request, session 등 POJO를 위배한 것으로 간주한다.
            .. 많이 쓰고 있지만 @Anootation 기반 설정도 엄연히 POJO라고 볼 수 없다.

            @Entity -> 이것도 위반한거긴 하다... (?)
            그렇다면 POJO잘 지킨 방식은 뭐냠...


    POJO Framework
        1. Spring, hibernate
            하나의 서비스를 개발할 때 시스템의 복잡함, 비즈니스 로직의 복잡함 등 다양한 어려움을 맞게 된다.
                -> 비즈니스 로직의 복잡함만 생각하자... 프레임워크 사용
            Spring과 hibernate 위 두 프레임워크는 객체지향적인 설계를 하고 있고, 또한 POJO를 지향하고 있다.
            그러므로 개발자가 서비스 로직에 집중하고 이를 POJO로 쉽게 개발 할 수 있도록 지원하고 있다.

    마치며
        자신의 코드에 if/else, switch가 난무하고 있지 않은가?
        책임과 역할이 다른 코드가 하나의 클래스에 다 들어가 있지 않은가?
            -> 클래스를 분리해서 처리해주면 SRP을 잘 지키게 될 수 있겠군!
        절차지향적으로 한 개의 파일에 모든 코드를 넣고 있진 않은가?
        내가 만든 객체가 재사용이 가능한가?

        앞으로는 복잡한 엔터프라이즈 로직은 프레임워크(Spring, hibernate)에 맡기고,
        이들이 지향하는 객체지향적 프로그래밍을 이를 사용하기만 해도 배울수 있는 장점이 있다.