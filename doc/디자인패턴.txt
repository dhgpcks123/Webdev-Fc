# 디자인 패턴
    자주 사용하는 설계 패턴을 정형화해서 이를 유형별로 가장 최적의 방법으로 개발 할 수 있도록 정해둔 설계
    명확하게 정답이 있는 형태는 아니며 프로젝트의 상황에 맞추어 적용이 가능하다.

    Gof 디자인 패턴
    소프트웨어를 설계할 때는 기존 경험이 매우 중요하다. 그러나 모든 사람들이 다양한 경험을 가지고 있을 수 없다.
    이러한 지식을 공유하기 위해 나온 것이 Gof(Gang of Four)
    사인방! 에리히 감마, 리처드 헬름, 랄프 존슨, 존 블리시데스이 책 씀.

    객체지향 개념에 따른 설계 중 재사용할 경우 유용한 설계를 디자인 패턴으로 정리해둔 것!
    Gof의 디자인 패턴은 23개!

    디자인 패턴의 장점
        - 개발자(설계자) 간의 원활한 소통
        - 소프트웨어 구조 파악 용이
        - 재사용을 통한 개발 시간 단축
        - 설계 변경 요청에 대한 유연한 대처
    디자인 패턴의 단점
        - 객체지향 설계 / 구현에 대한 이해
        - 초기 투자 비용 부담

    그 중 크게 3가지로 나눠서 공부해보자.
    생성 패턴
        -객체를 생성하는 것과 관련된 패턴으로, 객체의 생성과 변경이 전체 시스템에 미치는 영향을 최소화하고, 코드의 유연성을 높여준다.
            >Factory Method 패턴. Singleton 패턴, Prototype 패턴, Builder 패턴, Abstract Factory 패턴, Chaining 패턴
    구조 패턴
        - 프로그램 내의 자료구조나 인터페이스 구조 등 프로그램 구조를 설계하는데 활용될 수 있는 패턴
        클래스, 객체들의 구성을 통해서 더 큰 구조를 만들 수 있게 해준다.
        큰 규모의 시스템에서는 많은 클래스들이 서로 의존성을 갖는데 이런 복잡한 구조를 개발하기 쉽게 만들어주고, 유지보수하기 쉽게 만들어준다.
            >Adapter 패턴, Composite 패턴, Bridge 패턴, Decorator 패턴, Facade 패턴, Flyweight 패턴, Proxy 패턴
    행위 패턴
        - 반복적으로 사용되는 객체들의 상호작용을 패턴화한 것. 클래스나 객체들이 상호작용하는 방법과 책임을 분산하는 방법 제공.
        행위 패턴은 행위 관련 패턴을 사용하여 독립적으로 일을 처리하고자 할 때 사용
            >Observer 패턴, Strategy(디자인 패턴의 꽃) 패턴 등


#싱글톤 패턴
    싱글톤 패턴은 어떠한 클래스(객체)가 유일하게 1개만 존재할 때 사용한다.

    이를 주로 사용하는 곳은 서로 자원을 공유할 때 사용하는데, 실물 세계에서는 프린터가 해당되며,
    실제 프로그래밍에서는 TCP Socket 통신에서 서버와 연결된 connect 객체에 주로 사용한다.

    스프링 빈은 기본적으로 싱글톤으로 관리한다.

    Singleton
    생성자 private로 막아두고, static으로 올려둔 후 instance로 가져올 수 있도록 해준다.

#어댑터 패턴
    Adapter는 실생활에서는 100v를 220v로 변경해주거나, 그 반대로 해주는 흔히 돼지코라고 불리는 변환기를 예로 들 ㅅ 있다.
    호환성이 없는 기존 클래스의 인터페이스를 변환하여 재사용 할 수 있도록 한다.
    SOLID중에서 개방폐쇄 원칙(OCP)를 따른다.

#프록시 패턴
    Proxy는 대리인이라는 뜻으로써, 뭔가를 대신해서 처리하는 것.
    Proxy Class를 통해서 대신 전달하는 형태로 설계되며, 실제 Client는 Proxy로 부터 결과를 받는다.
    Cache의 기능으로도 활용이 가능하다.
    SOLID중에서 개방폐쇄 원칙(OCP)와 의존 역전 원칙(DIP)를 따른다.


    AOP 특정 메서드 실행시간, 전, 후, 리퀘스트, 리스폰스 일괄적으로 전 후에 기능을 넣을 수 있음.

#데코레이터 패턴
    기존 뼈대(클래스)는 유지하되, 이후 필요한 형태로 꾸밀 때 사용한다. 확장이 필요한 경우 상속의 대안으로 사용.
    OCP, DIP 원칙을 따른다.
    커피 원액 + 물 -> 아메리카노
    커피 원액 + 우유 -> 라떼

    케이크 + 크림 -> 크림케이크
    케이크 + 딸기 -> 딸키케이크
    케이크 + 고구마 -> 고구마케이크

    원본이 있고 추가적으로 무언가를 더하는... 그런 개념. 데코레이터 패턴