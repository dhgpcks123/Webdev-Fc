<h1>REST</h1>
    REST API! REST란 무엇인가?
    REST(Representational State Transfer: 자원의 상태 전달) 네트워크 아키텍처
    1. Client, Server : 클라이언트와 서버가 서로 독립적이어야 한다. 분리되어야 한다. -> 아니다? REST API를 잘 못 지켰다! 서버 바껴도 클라이언트에 지장x 클라이언트 바껴도 서로 지장 x
    2. Stateless : 요청에 대해서 클라이언트의 상태를 서버에 저장하지 않는다. 서버는 클라이언트의 상태를 몰라야 한다.
    3. Cache : 클라이언트는 서버의 응답을 Cache(임시저장)할 수 있어야 한다. 클라이언트가 Cache를 통해서 응답 재사용할 수 있어야 하며, 이를 통해 서버의 부하를 낮춘다.
    4. 계층화 : 서버와 클라이언트 사이에 방화벽, 게이트웨이, 프록시 서버 등 다양한 계층 형태로 구성이 가능해야 하며, 이를 확장해야 한다. 계층형으로 만들어야 한다.
    5. 인터페이스 일관성 : 인터페이스의 일관성을 지키고, 아키텍처를 단순화시켜 작은 단위로 분리하여, 클라이언트, 서버가 독립적으로 개선될 수 있어야 한다.
    6. Code on Demand(Optional) : 자바 애플릿, 자바스크립트, 플래시 등 특정한 기능을 서버로 부터 클라이언트가 전달받아 클라이언트에서 실행되어야 한다. js... 전달 해주면 클라이언트 단에서 실행하는 거!


    다음의 인터페이스 일관성이 잘 지켜졌는지에 따라 REST를 잘 사용했는지 판단할 수 있음

    1. 자원의 식별
        웹 기반 REST에선 리소스 접근할 때 URI사용

        https://foo.co.kr/user/100
        Resource : user
        식별자 : 100

    2. 메시지를 통한 리소스 조작
        Web 다양한 방식으로 데이터 전달 가능
        HTML, XML, JSON, TEXT 등
        HTTP Header부분의 content-type을 통해 데이터 타입 지정할 수 있다.

        또한 리소스 조작을 위해 데이터 전체 말고, 메시지를 전달해야 함

        ex) 서버 user 전화번호를 number 컬럼명에 저장
        -> 추후 phoneNumber로 컬럼명 바뀌면? Client는 처리 못하고 에러 남
        그래서 별도의 형태로 메시지 형태로 데이터를 주고 받음.

        서버와 클라이언트 독립적이어야 함!

    3. 자기 서술적 메시지
        HTTP 기반의 REST에서는 HTTP Method와 Header 정보, 그리고 URI의 포함되는 정보로 표현할 수 있다.

        GET -> 사용자의 정보 요청
        POST -> 사용자 정보 생성
        PUT -> 사용자 정보 생성 및 수정
        DELETE -> 사용자 정보 삭제
        그 외에 담지 못한 정보들은 URI의 메시지를 통해서 표현 HTTP Header와 HTTP Body겠지?

    4. 애플리케이션 상태에 대한 엔진으로써 하이퍼미디어

        REST API를 개발할 때 단순히 Client 요청에 대해 응답만 하는 게 아니라
        서버가 가지고 있는 리소스에 대한 Link정보까지 같이 포함되어야 한다.
        (뭔 말인지 모르겠는데 현업에서 잘 안지켜지는 부분이래)

    => REST Ful하다고 표현. REST API라고 부른다.
